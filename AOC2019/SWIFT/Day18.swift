////
////  Day18.swift
////  AdventOfCode2019
////
////  Created by Adahus on 18/12/2019.
////  Copyright Â© 2019 Adahus. All rights reserved.
////
//
//struct Person: Equatable {
//  var name: String
//  var position: Position
//  var description: String { "Person(\(name))" }
//}
//
//indirect enum Location: Hashable {
//  case at(Position)
//  case with(Person)
//
//  static func == (lhs: Location, rhs: Location) -> Bool {
//    switch (lhs,rhs) {
//    case (.at(let lhsPosition),.at(let rhsPosition)): return lhsPosition == rhsPosition
//    case (.with(let lhsPerson),.with(let rhsPerson)): return lhsPerson == rhsPerson
//    default: return false
//    }
//  }
//
//  func hash(into hasher: inout Hasher) {
//    hasher.combine(name)
//    hasher.combine(position)
//  }
//  
//  var position: Position {
//    switch self {
//    case .at(let position): return position
//    case .with(let person): return person.position
//    }
//  }
//}
//
//typealias LockCode = Character
//
//struct Door: Thing {
//  var code: LockCode /// A to Z
//  var location: Location
//  var description: String { "Door(\(code))" }
//  
//  init(code: LockCode, position: Position) {
//    guard code >= "A" && code <= "Z" else { fatalError("Door code must be A to Z") }
//    self.code = code
//    location = .at(position) /// Doors can't move!
//  }
//
//  func unlockCode() -> LockCode { LockCode(UnicodeScalar(code.asciiValue!-32)) }
//}
//
//struct Key: Thing {
//  var code: LockCode  /// a to z
//  var location: Location
//  var description: String { "Key(\(code))" }
//
//  init(code: LockCode, position: Position) {
//    guard code >= "a" && code <= "z" else { fatalError("Door code must be a to z") }
//    self.code = code
//    location = .at(position) /// Doors can't move!
//  }
//}
//
//struct Entrance: Thing {
//  var location: Location
//  var description: String { "Entrance(@)" }
//  
//  init(position: Position) {
//    location = .at(position) /// Entrance can't move!
//  }
//}
//
//extension Thing {
//  init(_ char: Character, _ position: Position) {
//    switch char {
//    case "@": self = Entrance(char, position) as! Self
//    case "A"..."D": self = Door(char, position) as! Self
//    case "a"..."z": self = Key(char, position) as! Self
//    default: fatalError("Unrecognised feature")
//    }
//  }
//}
//
//struct Things<Element: Thing> {
//  var things: [Element]
//}
//
//func test() {
//  var vault = AdjacencyList<Position>()
//  var things: Thingz]
//  var locations: Dictionary<Position,[Thing]>
//
//  let entrance = vault.createVertex(data: Position(x: 0, y: 0))
//  
//
//}
//
//struct Tunnel {
//  var from: Place
//  var to:   Place
//  var length: Int /// Shortest number of squares to traverse
//}
//
//struct Vault {
//  var places: [Place] = []
//  var tunnels: [Tunnel] = []
//  var currentPlace: Int
//  
//  init(layout: [[Place]]) {
//    places = [Place(
//      position: Position(x: 0,y: 0)
//      feature: .entrance
//      )]
//    tunnels = [Tunnel(from: Position, to: <#T##Place#>, length: <#T##Int#>)]
//    return
//    
//  }
//}
//
//struct Journey {
//  var from: Place /// Can be one of entrance or door or key
//  var to: Place /// Can be one of entrance or door or key
//  var length: Int
//  var doors: [Place] /// Doors on the journey
//  var keys:  [Place] /// Keys on the journey
//}
//
//
//
//struct Day18 {
//  
//  /// Strategy is:
//  /// 1) Fill in any dead ends with wall as they don;t add anything
//  
//  let dataTest1 = ([
//    "#########",
//    "#b.A.@.a#",
//    "#########"
//  ], 8)
//  
//  let dataTest2 = ([
//    "########################",
//    "#f.D.E.e.C.b.A.@.a.B.c.#",
//    "######################.#",
//    "#d.....................#",
//    "########################"
//  ], 86)
//  
//  let dataTest3 = ([
//    "########################",
//    "#...............b.C.D.f#",
//    "#.######################",
//    "#.....@.a.B.c.d.A.e.F.g#",
//    "########################"
//  ], 132)
//  
//  let dataTest4 = ([
//    "#################",
//    "#i.G..c...e..H.p#",
//    "########.########",
//    "#j.A..b...f..D.o#",
//    "########@########",
//    "#k.E..a...g..B.n#",
//    "########.########",
//    "#l.F..d...h..C.m#",
//    "#################"
//  ], 136)
//  
//  let dataTest5 = ([
//    "########################",
//    "#@..............ac.GI.b#",
//    "###d#e#f################",
//    "###A#B#C################",
//    "###g#h#i################",
//    "########################"
//  ], 81)
//  
//  let data = ([
//    "#################################################################################",
//    "#.............#.#..g..........#t........#...#...................#.....#.....#...#",
//    "#W#########.#.#.#.#########.#.#.#####.###.#.#############.#####.###.#.#.#.#.###.#",
//    "#.#...#.....#...#.#...#...#.#.#.#...#...#.#.#....s..#..o#...#.#...#.#...#.#.#...#",
//    "#.###.#.#######.#.###.#.#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.###.###.###.#.#.###",
//    "#.....#.#.....#.#.#...#.#.#.....#.#.#.#.#.#...#...#.#.#.#.#.#...#...#...#.#.#...#",
//    "###.###.#.#.###.#.#.###.#.#######.#I###.#.#####.#.#.#.#.###.###.###.#.###.#.###.#",
//    "#.#.#...#.#.....#.#.#...#.....#...#.....#n..#...#.#...#...#.#...#.#.#.#...#...#.#",
//    "#.#.#.#####.#####.#.#.#####.###.###########.#.###########.#.#.#.#.#X###.#####.#.#",
//    "#.#.#x..Y.#.....#.#...#.....#...#.......#...#.#.............#.#...#.....#...#...#",
//    "#.#.#####.#######.#.###.#.###.###.#####.#.###.#.#############.###########.#.###.#",
//    "#...#...#.....#...#...#.#.#.E.#......j#.#.#...#.#.#.K.......#.#.....#.....#...#.#",
//    "#.###.#.#####.#.#######.###.#.#.#######.#.###.#.#.#.#######.#.#.#.#.#.###.#####.#",
//    "#.#...#.#.....#.#.....#.#...#.#.#.#.....#...#.....#.#b..#...#...#.#...#.#.#.....#",
//    "#.#.#.###.###.#.#.###.#.#.#####V#.#.#####.#.#######.#.#.#.###.###.#####.#Z#.#####",
//    "#.#.#.#...#.#.#...#...#.#.........#.....#.#...........#.#...#.#.#...#...#.#...#.#",
//    "#.#.###.###.#.#.#####.#.#########.#####.#.#################.#.#.###.###.#.###.#.#",
//    "#...#...#.....#.#...#.....#..q#.......#.#.......#...#.......#.#.#...#...#...#...#",
//    "#.###.###.#####.#.#.#######.#.#########.#########.#.#.#######.#.#.###.#####.###.#",
//    "#.#...#...#.....#.#.F.#.....#.........#.#.........#.#.#.........#...#.H...#...#.#",
//    "###.#######.#####.###.#.#############U#.#.###.#####.#.#########.###.#.###.#.###.#",
//    "#...#.....#.#...#...#.#.#...#.......#...#.#...#...#.#.....#...#...#.#...#...#...#",
//    "#.###.###.#.###.###.###.###.#.###.#.#####.#####.#.#.#####.#.#######.#########.###",
//    "#.....#...#.....#...#.....#...#...#.....#.....#.#.#.......#.#.......#.....#...#.#",
//    "#.#####.#######.#.###.###.#.###.#######.#.###.#.#.#######.#.#.###.###.###J#.###.#",
//    "#.....#.....#...#...#.#.#.#...#.....#...#...#...#.#.#.....#.#...#.#...#...#.#...#",
//    "#####.#####.#.#####.#.#.#.###.#####.#.###.#####.#.#.#.#####.#.#.#.#.###.#.#.###.#",
//    "#.....#...#.#.#.....#...#.#.#.#...#.#.#.#.#...#.#.#.....#...#.#.#.#..u#.#.#.....#",
//    "#.#######.#.#.#.#######.#.#.#.#.#.#.#.#.###.#.###.#######.###.#.###.###.#.#####.#",
//    "#.#.......#...#h#.......#.#...#.#.#.#.#c#...#...#...#.L.#...#.#...#.#...#.#.....#",
//    "#.###.#.#######.#.#######.#####.#.#.#.#.#.#####.###.#.#.###.#.###.#.#.#####.#####",
//    "#...#.#.....#...#...#...P.#.....#...#.#.#.#.........#.#.....#...#...#.....#.#...#",
//    "###.#####.#.#.#######.#####.#########.#.#.#.#########.#########.#########.#.#.#.#",
//    "#.#.....#.#.#.....#...#.....#.#.....#.#.#.#.#.....#...#...#...#.#..p..#.#.#...#.#",
//    "#.#####.#.#.#####.#.#####.###.#.#.###.#.#.###.###.#.###.###.#.#Q#.###.#.#.#####.#",
//    "#.......#.#.....#..z#.....#.#...#.....#.#...#...#.#.#...#...#.#...#.#.#.#..v..#.#",
//    "#.#######.#.###.#####.#.###.#.#########.###.###.#.#.#.#.#.###.#####.#.#.###.###.#",
//    "#.#.......#...#.#.....#.#.#...#...#...#.#...#...#.#.#.#.#.#.#.........#...#...#.#",
//    "#.###########.#.#######.#.#.###.#.#.#.#.#.###.###.#.#.#.#.#.#############.###.#.#",
//    "#.............#.........#.......#...#...........#...#.#....................f#...#",
//    "#######################################.@.#######################################",
//    "#.........#.....#.........#.....#.............#...............#.........#.......#",
//    "#.#####.###.###.#.#####.###.###.#.#.###.#.#.###.#########.###.#.#####.#.###.###.#",
//    "#.#.....#...#...#.....#...#.#.#...#...#.#.#.....#.......#.#...#.#.....#...#...#.#",
//    "###.#####.###.#.#####.###.#.#.#######.#.#.#######.###.###.###.#.#.#.#####.###.#.#",
//    "#...#.....#...#...#.#.#.#.#...#.....#.#.#.#...#...#.#...#...#.#.#.#.#...#.....#.#",
//    "#.###.#####.#####.#.#.#.#.###.#####.#.###.###.#.###.###.###.###.#.#.#.#.#.#######",
//    "#.#...#...#.....#.#.#.#.#...#.....#.#...#.#...#...#...#...#.....#.#.#.#.#.#.....#",
//    "#.#.###.#.#####.#.#.#.#.###.#####.#.###.#.#.#####.#.#.#.#.#######.###.#.###.###.#",
//    "#.#.#...#...#...#...#.#...#.....#.....#.#.#.........#.#.#.....#.#..d..#...#.#.#.#",
//    "#.#.#.#.###.#.#######.#.#.###.###.#####.#.#.#########.#.#####.#.#########.#.#A#.#",
//    "#...#.#.#.#.#...#.....#.#...#.#...#.....#.#.#...#.....#.#.#..m#.......#...#.#.#r#",
//    "#.#####.#.#.###.#.#######.#.#.#.###.###.#.###.#C#######.#.#.#########.#.###.#.#.#",
//    "#...#...#.#...#...#.......#.#...#l..#.#.#.....#.........#...#.........#.......#.#",
//    "###.#.###.###.#####.#####.#####.#.###.#.#################.###.###############.#.#",
//    "#.#.#.#.............#.....#...#.#...#...#.......#.........#...#.......#...#...#.#",
//    "#.#.#.###################.#.#.#####.#.###.#####.#.#########.###.#####.#.#.#####.#",
//    "#...#...#a..#...........#.#.#.......#...#.....#.#.....#.....#...#.......#.......#",
//    "#.#####.#.#.#.#########.#.#.#.###########.###.#.#####.###.#.#.###.#############.#",
//    "#...#...#.#.D.#...#...#.#.#.#.#.........#.#...#.#...#...#.#.#...#.....#.....#...#",
//    "###.#.#.#.###.#.#.#.#.#M###.###.#######.###.###.#.#.###.#.#####.###.###.###.#.###",
//    "#.....#.#.#...#.#...#.#...#.#...#.....#.#...#...#.#.......#..e#...#.#...#.#.#...#",
//    "#######.#.###.#.#########.#.#.###.###.#.#.#######.#########.#####.#.#.###.#.#####",
//    "#.....#.#...#.#.......#.....#.#...#...#.#.........#...#.....#...#.#.#.#...#.....#",
//    "#.###.#####.#########.#.#####.#####.#.#.#.#########.#.#.#####.#.#.###.#.#.#####.#",
//    "#.#.#.#...#.........#.#.#.....#.....#.#.#.#...#.....#.#i#.....#...#...#.#...#...#",
//    "#.#.#.#.#.###.#####.#.###.#####.#####.#.#.#.###.###.#.#.#.#########.#######.#.#.#",
//    "#.#.#...#.#...#.#...#.....#...#...#...#.#.#.#...#...#.#.#.............#.....#.#.#",
//    "#.#.#####.#.###.#.#########.###.#.#####.#.#.#.###.#####.#.###########.#.#####.###",
//    "#.#.....#.#.#.....#.......#.#...#...#...#.#.....#...#...#.#......w..#...#...#...#",
//    "#.#.#.###R#.#.#########.#.#.#.#####.#.###.#########.#.#####.#######.#####.#.###.#",
//    "#.#.#.......#.#.......#.#...#.#...#...#.#...........#...#...#.....#.......#...#.#",
//    "#.###########.#.#.###.#.#.###.#.#.#####.###.###########T#.#######.###########.#.#",
//    "#.#.....#.....#.#.#.#...#.#...#.#...#...#...#...........#.#.....#.........#.#...#",
//    "#.#.###.###.#####.#.#####.#.#####.#.#.#.#.###.###########.#.#.#.#.#####.#.#.#####",
//    "#.#.#.#...#...#...#.......#.....#.#...#.#.#.#.#...........#.#.#.#...#...#...#...#",
//    "#.#.#.###.###.#.#.#############.#####.#.#.#.#.###.###########.#.#####.#####.###.#",
//    "#.#.#...#.#.....#.#.S.........#.#...#.#y#..k#.G...#.........B.#.....#.....#...#.#",
//    "#.#.#.#.#.#########.#########.#.#.#.###.###.###########.###########.#####.###.#.#",
//    "#.....#.#...................#.O...#.....#...............#...........N.....#.....#",
//    "#################################################################################"
//  ], 8888888)
//  
//}
//
