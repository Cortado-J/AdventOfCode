def run_intcode_program(program, input_value):
    program = program[:]
    pc = 0  # Program counter
    outputs = []

    def get_value(mode, param):
        return param if mode == 1 else program[param]

    while True:
        # Parse the opcode and parameter modes
        instruction = str(program[pc]).zfill(5)
        opcode = int(instruction[-2:])
        modes = list(map(int, instruction[:-2][::-1]))

        if opcode == 99:
            # Program halt
            break

        elif opcode in (1, 2):  # Addition or multiplication
            param1 = get_value(modes[0], program[pc + 1])
            param2 = get_value(modes[1], program[pc + 2])
            dest = program[pc + 3]
            if opcode == 1:
                program[dest] = param1 + param2
            elif opcode == 2:
                program[dest] = param1 * param2
            pc += 4

        elif opcode == 3:  # Input
            dest = program[pc + 1]
            program[dest] = input_value
            pc += 2

        elif opcode == 4:  # Output
            param1 = get_value(modes[0], program[pc + 1])
            outputs.append(param1)
            pc += 2

        elif opcode in (5, 6):  # Jump-if-true or jump-if-false
            param1 = get_value(modes[0], program[pc + 1])
            param2 = get_value(modes[1], program[pc + 2])
            if (opcode == 5 and param1 != 0) or (opcode == 6 and param1 == 0):
                pc = param2
            else:
                pc += 3

        elif opcode in (7, 8):  # Less than or equals
            param1 = get_value(modes[0], program[pc + 1])
            param2 = get_value(modes[1], program[pc + 2])
            dest = program[pc + 3]
            if (opcode == 7 and param1 < param2) or (opcode == 8 and param1 == param2):
                program[dest] = 1
            else:
                program[dest] = 0
            pc += 4

        else:
            raise ValueError(f"Unknown opcode: {opcode}")

    return outputs


if __name__ == "__main__":
    program = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,16,13,225,1001,88,68,224,101,-114,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,8,76,224,101,-84,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,1101,63,58,225,1102,14,56,224,101,-784,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,29,46,225,102,60,187,224,101,-2340,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,60,53,225,1101,50,52,225,2,14,218,224,101,-975,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1002,213,79,224,101,-2291,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,114,117,224,101,-103,224,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1101,39,47,225,101,71,61,224,101,-134,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,29,13,225,1102,88,75,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,359,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,374,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,389,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,419,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,434,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,509,1001,223,1,223,1008,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,554,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,569,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,629,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,659,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

    # Part 1
    diagnostic_code_1 = run_intcode_program(program, input_value=1)
    print("Diagnostic Code for System ID 1:", diagnostic_code_1[-1])

    # Part 2
    diagnostic_code_2 = run_intcode_program(program, input_value=5)
    print("Diagnostic Code for System ID 5:", diagnostic_code_2[-1])
